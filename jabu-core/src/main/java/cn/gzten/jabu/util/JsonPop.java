package cn.gzten.jabu.util;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.ToNumberPolicy;
import com.google.gson.internal.LinkedTreeMap;
import com.google.gson.reflect.TypeToken;
import org.eclipse.jetty.util.StringUtil;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.regex.Pattern;

public class JsonPop {
    private Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();
    private static final Pattern PATTERN_PROPS_ARRAY_KEY = Pattern.compile("([A-Za-z0-9_-]+)\\[(\\d+)]");

    private LinkedTreeMap<String, Object> props = new LinkedTreeMap<>();

    public void load(InputStream ins) {
        var fromMap = gson.fromJson(new InputStreamReader(ins), new TypeToken<LinkedTreeMap<String, Object>>(){});

        copyMap(fromMap, props);
    }

    public static void copyMap(Map<String, Object> from, Map<String, Object> to) {
        from.forEach((k, v) -> {
            if (v == null) {
                to.put(k, null);
                return;
            }

            if (!to.containsKey(k)) {
                to.put(k, v);
                return;
            }

            // the to-map already contains the key
            if (v instanceof Map ltm) {
                if (to.get(k) instanceof Map toValue) {
                    copyMap(ltm, toValue);
                    return;
                }
            }

            // v instanceof List, for list, directly replace it.
            // v instanceof Double
            // v instanceof String
            // v instanceof Long
            // v instanceof Boolean
            to.put(k, v);

        });
    }

    /**
     * Convenient method to put the path like 'example.book.name'
     * Does NOT support for list like example.books[0].name
     * @param keyPath
     * @param value
     */
    public void put(String keyPath, Object value) {
        if (StringUtil.isBlank(keyPath)) return;

        var keys = keyPath.split("\\.");

        var end = keys.length;
        var last = end - 1;

        Map<String, Object> map = props;
        for (int i=0; i<keys.length; i++) {
            var key = keys[i];

            if (i == last) {
                map.put(key, value);
            } else {
                if (map.containsKey(key)) {
                    map = (Map<String, Object>) map.get(key);
                } else {
                    var m = new LinkedTreeMap<String, Object>();
                    map.put(key, m);
                    map = m;
                }
            }
        }
    }

    /**
     * The props should be generated by Gson with proper ObjectToNumberStrategy.
     * var gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();
     * @param keyPath
     * @param clazz
     * @return
     * @param <T>
     */
    public <T extends Object> T getProperties(String keyPath, Class<T> clazz) {
        assert keyPath!=null;
        var keys = keyPath.split("\\.");

        Function<Object, T> convertScalar = (o) -> {
            if (o == null) return null;

            if (o.getClass().equals(clazz)) {
                return (T)o;
            } else if (o instanceof String s) {
                if (Integer.class.equals(clazz)) {
                    return (T)Integer.valueOf(s);
                } else if (Long.class.equals(clazz)){
                    return (T)Long.valueOf(s);
                } else if (Boolean.class.equals(clazz)){
                    return (T)Boolean.valueOf(s);
                }
            } else if (o instanceof Long num) {
                if (Integer.class.equals(clazz)) {
                    return (T)(Integer)num.intValue();
                } else if (Long.class.equals(clazz)){
                    return (T)num;
                }
            } else if (o instanceof Double num) {
                if (Float.class.equals(clazz)) {
                    return (T)(Float)num.floatValue();
                } else if (Double.class.equals(clazz)){
                    return (T)num;
                }
            } else if (o instanceof Boolean num) {
                if (String.class.equals(clazz)) {
                    return (T)num.toString();
                } else if (Boolean.class.equals(clazz)){
                    return (T)num;
                }
            } else if (o instanceof List || o instanceof Map) {
                return JsonUtil.toObject(JsonUtil.toJson(o), clazz);
            }

            return (T)o;
        };

        Map<String, Object> map = props;
        var end = keys.length;
        var last = end - 1;
        for (int i=0; i < end; i++) {
            var key = keys[i];
            var m = PATTERN_PROPS_ARRAY_KEY.matcher(key);
            Integer idx = null;
            if (m.matches()) {
                key = m.group(1);
                idx = Integer.valueOf(m.group(2));
            }

            var o = map.get(key);
            if (o == null) return null;

            if (i == last) {
                if (idx != null) {
                    if (o instanceof List list) {
                        return convertScalar.apply(list.get(idx));
                    } else {
                        return null;
                    }
                }
                return convertScalar.apply(o);
            } else {
                if (idx != null) {
                    if (o instanceof List list) {
                        map = (Map<String, Object>)(list.get(idx));
                    } else {
                        return null;
                    }
                } else {
                    map = (Map<String, Object>) o;
                }
            }
        }

        return null;
    }

    public <T> T toConfig(String prefix, Class<T> clazz) {
        return getProperties(prefix, clazz);
    }
}
