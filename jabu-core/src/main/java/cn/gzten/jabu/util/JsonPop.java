package cn.gzten.jabu.util;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.ToNumberPolicy;
import com.google.gson.internal.LinkedTreeMap;
import com.google.gson.reflect.TypeToken;
import org.eclipse.jetty.util.StringUtil;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.function.Function;
import java.util.regex.Pattern;

public class JsonPop {
    private Gson gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();
    private static final Pattern PATTERN_PROPS_ARRAY_KEY = Pattern.compile("([A-Za-z0-9_-]+)\\[(\\d+)]");

    private LinkedTreeMap<String, Object> props = new LinkedTreeMap<>();

    public void load(InputStream ins) {
        // TODO: Merge sub-object fields, instead of replacing the sub-object
        var m = gson.fromJson(new InputStreamReader(ins), new TypeToken<LinkedTreeMap<String, Object>>(){});
        props.putAll(m);
    }

    /**
     * Convenient method to put the path like 'example.book.name'
     * TODO: add support for list like example.books[0].name
     * @param keyPath
     * @param value
     */
    public void put(String keyPath, Object value) {
        if (StringUtil.isBlank(keyPath)) return;

        var keys = keyPath.split("\\.");

        var end = keys.length;
        var last = end - 1;

        var map = props;
        for (int i=0; i<keys.length; i++) {
            var key = keys[i];

            if (i == last) {
                map.put(key, value);
            } else {
                if (map.containsKey(key)) {
                    map = (LinkedTreeMap<String, Object>) map.get(key);
                } else {
                    var m = new LinkedTreeMap<String, Object>();
                    map.put(key, m);
                    map = m;
                }
            }
        }
    }

    /**
     * The props should be generated by Gson with proper ObjectToNumberStrategy.
     * var gson = new GsonBuilder().setObjectToNumberStrategy(ToNumberPolicy.LONG_OR_DOUBLE).create();
     * @param keyPath
     * @param clazz
     * @return
     * @param <T>
     */
    public <T extends Object> T getProperties(String keyPath, Class<T> clazz) {
        assert keyPath!=null;
        var keys = keyPath.split("\\.");

        Function<Object, T> convertScala = (o) -> {
            if (o.getClass().equals(clazz)) {
                return (T)o;
            } else if (o instanceof String s) {
                if (Integer.class.equals(clazz)) {
                    return (T)Integer.valueOf(s);
                } else if (Long.class.equals(clazz)){
                    return (T)Long.valueOf(s);
                }
            } else if (o instanceof Long num) {
                if (Integer.class.equals(clazz)) {
                    return (T)(Integer)num.intValue();
                } else if (Long.class.equals(clazz)){
                    return (T)num;
                }
            } else if (o instanceof Double num) {
                if (Float.class.equals(clazz)) {
                    return (T)(Float)num.floatValue();
                } else if (Double.class.equals(clazz)){
                    return (T)num;
                }
            }

            return (T)o;
        };

        var map = props;
        var end = keys.length;
        var last = end - 1;
        for (int i=0; i < end; i++) {
            var key = keys[i];
            var m = PATTERN_PROPS_ARRAY_KEY.matcher(key);
            Integer idx = null;
            if (m.matches()) {
                key = m.group(1);
                idx = Integer.valueOf(m.group(2));
            }

            var o = map.get(key);
            if (o == null) return null;

            if (i == last) {
                if (idx != null) {
                    if (o instanceof List list) {
                        return convertScala.apply(list.get(idx));
                    } else {
                        return null;
                    }
                }
                return convertScala.apply(o);
            } else {
                if (idx != null) {
                    if (o instanceof List list) {
                        map = (LinkedTreeMap<String, Object>)(list.get(idx));
                    } else {
                        return null;
                    }
                } else {
                    map = (LinkedTreeMap<String, Object>) o;
                }
            }
        }

        return null;
    }
}
